Yep,
my side, these are some notes from the other day related to the visualization side, so avoiding all general stuff about the schema definition and edges restrictions, which will be done much better by @laughedelic + wow doge summary for sure.

- **Progressively navigation. Small regions.**
Although the graph is small enough to be displayed all at once, it might be messy or difficult to understand the relationships of a certain part. For efficient closer views of subregions/modules of the graph an interactive approach to the network will be needed by collapsing or hiding fragments of the graph along the navigation.
This involves the need of a kind of visual history route with the steps done (...->...->... kind) to allow going steps backward along the graph travel, and/or a small map with the position in the whole context.
Re. the schema.json side, "in/out" attributes of the edges are required. Maybe also "groups/modules" labels as properties for grouping operations, and for what was discussed about edges within a group that are always required on it or not, etc.

- **Layout.**
The network structure is usually represented by plotting x, y coordinates (as attributes of the nodes), or by applying any "force-based" algorithm, based on repulsive/attractive forces and a canvas gravity.
From my understanding of what we talked the other day, although d3 has its own Force Layout for visualizing networks, it might not be suitable for the project as it mixes the layout and the representation all together. But actually the visual representation of the elements (if SVG circles, lines, arcs.. etc) is always separated to any layout. On the force layout for graphs it performs the forces and gives attributes to the nodes (x and y coordinates, weight..) and links (source and target nodes) as explained on the d3 documentation.
*To do*: Research other layout solutions as for example dagre directed graph layout for Javascript as it focus in on the graph layout only, relying on whatever other technology to actually render it. In our case, d3 using css and svg.
Although I'm a bit confuse if that means that the position of all nodes will be locked from the beginning to whatever layout dagree gives, and not giving the possibility to re-arrange the positions with d3, or not at all.

- **Graphical representation.** 
*To do*: Start thinking on how to represent graphically all properties/restrictions discussed on the meeting (cardinality constraints, always defined or not, etc).

- **JSON/GraphSON formats.**
*To do*: See format requirements of the schema representation for visualizing it using d3. 
Still with a bit of mess my side with this. I understand basic json data structure for networks as array of objects:
```
{
  "nodes":[
    { "name":"Taxon", "property1":2, "property2":"lalala" },
    ...
    ],

   "edges": [
    { "source": 0, "target": 1, "property3": "lelele" },
    ...
    ]
}];
```
...and how the d3 force layout read it, but a bit lost outside this, how different it is from GraphSON one, what happens if using other external libraries as dagree-d3, etc.
But will review all this for next meeting.

Best