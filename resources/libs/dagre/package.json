{
  "name": "dagre",
  "version": "0.4.5",
  "description": "Graph layout for JavaScript",
  "main": "index.js",
  "keywords": [
    "graph",
    "layout"
  ],
  "devDependencies": {
    "browserify": "~2.33.1",
    "chai": "1.8.x",
    "graphlib-dot": "0.4.8",
    "jshint": "2.1.x",
    "istanbul": "~0.1.44",
    "mocha": "1.12.x",
    "semver": "2.1.x",
    "uglify-js": "1.2.3"
  },
  "dependencies": {
    "cp-data": "1.1.3",
    "graphlib": "0.7.4"
  },
  "author": {
    "name": "Chris Pettitt",
    "email": "chris@samsarin.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/cpettitt/dagre.git"
  },
  "license": "MIT",
  "readme": "# dagre - Graph layout for JavaScript\n\n[![Build Status](https://secure.travis-ci.org/cpettitt/dagre.png?branch=master)](http://travis-ci.org/cpettitt/dagre)\n\nDagre is a JavaScript library that makes it easy to lay out directed graphs on\nthe client-side.\n\nKey priorities for this library are:\n\n1. **Completely client-side computed layout**. There are great, feature-rich\n   alternatives, like [graphviz](http://www.graphviz.org), if client-side\n   layout is not a requirement for you.\n\n2. **Speed**. Dagre must be able to draw medium sized graphs quickly, potentially\n   at the cost of not being able to adopt more optimal or exact algorithms.\n\n3. **Rendering agnostic**. Dagre requires only very basic information to lay out\n   graphs, such as the dimensions of nodes. You're free to render the graph using\n   whatever technology you prefer. We use [D3][]\n   in some of our examples and highly recommend it if you plan to render using\n   CSS and SVG.\n\nNote that dagre is current a pre-1.0.0 library. We will do our best to\nmaintain backwards compatibility for patch level increases (e.g. 0.0.1 to\n0.0.2) but make no claim to backwards compatibility across minor releases (e.g.\n0.0.1 to 0.1.0). Watch our [CHANGELOG](CHANGELOG.md) for details on changes.\n\n## Getting Dagre\n\n### Browser Scrips\n\nYou can get the latest browser-ready scripts:\n\n* [dagre.js](http://cpettitt.github.io/project/dagre/latest/dagre.js)\n* [dagre.min.js](http://cpettitt.github.io/project/dagre/latest/dagre.min.js)\n\n### NPM Install\n\nBefore installing this library you need to install the [npm package manager].\n\nTo get dagre from npm, use:\n\n    $ npm install dagre\n\n### Build From Source\n\nBefore building this library you need to install the [npm package manager].\n\nCheck out this project and run this command from the root of the project:\n\n    $ make dist\n\nThis will generate `dagre.js` and `dagre.min.js` in the `dist` directory\nof the project.\n\n## Using Dagre\n\n### A Note on Rendering\n\nAs mentioned above, dagre's focus in on graph layout only. This means that you\nneed something to actually render the graphs with the layout information from\ndagre.\n\nThere are a couple of options for rendering:\n\n* [dagre-d3](https://github.com/cpettitt/dagre-d3) is a D3-based renderer for\n  dagre.\n* [JointJS][] is a renderer that provides facilities for editing a graph after\n  it has been rendered.\n\n### An Example Layout\n\nFirst we need to load the dagre library. In an HTML page you do this by adding\nthe following snippet:\n\n```html\n<script src=\"http://PATH/TO/dagre.min.js\"></script>\n```\n\nIn node.js you use:\n\n```js\nvar dagre = require(\"dagre\");\n```\n\nWe use [graphlib](https://github.com/cpettitt/graphlib) to create graphs in\ndagre, so its probably worth taking a look at its\n[API](http://cpettitt.github.io/project/graphlib/latest/doc/index.html).\nGraphlib comes bundled with dagre. In this section, we'll show you how to\ncreate a simple graph.\n\nA node must be an object with the following properties:\n\n* `width` - how wide the node should be in pixels\n* `height` - how tall the node should be in pixels\n\nThe attributes would typically come from a rendering engine that has already\ndetermined the space needed for a node.\n\nHere's a quick example of how to set up nodes and edges:\n\n```js\n// Create a new directed graph\nvar g = new dagre.Digraph();\n\n// Add nodes to the graph. The first argument is the node id. The second is\n// metadata about the node. In this case we're going to add labels to each of\n// our nodes.\ng.addNode(\"kspacey\",    { label: \"Kevin Spacey\",  width: 144, height: 100 });\ng.addNode(\"swilliams\",  { label: \"Saul Williams\", width: 160, height: 100 });\ng.addNode(\"bpitt\",      { label: \"Brad Pitt\",     width: 108, height: 100 });\ng.addNode(\"hford\",      { label: \"Harrison Ford\", width: 168, height: 100 });\ng.addNode(\"lwilson\",    { label: \"Luke Wilson\",   width: 144, height: 100 });\ng.addNode(\"kbacon\",     { label: \"Kevin Bacon\",   width: 121, height: 100 });\n\n// Add edges to the graph. The first argument is the edge id. Here we use null\n// to indicate that an arbitrary edge id can be assigned automatically. The\n// second argument is the source of the edge. The third argument is the target\n// of the edge.\ng.addEdge(null, \"kspacey\",   \"swilliams\");\ng.addEdge(null, \"swilliams\", \"kbacon\");\ng.addEdge(null, \"bpitt\",     \"kbacon\");\ng.addEdge(null, \"hford\",     \"lwilson\");\ng.addEdge(null, \"lwilson\",   \"kbacon\");\n```\n\nNext we can ask dagre to do the layout for these nodes and edges. This is done\nwith the following code:\n\n```js\nvar layout = dagre.layout().run(g);\n```\n\nAn object with layout information will be attached to each node and edge under\nthe `dagre` property.\n\nThe node's `dagre` object has the following properties:\n\n* **x** - the x-coordinate of the center of the node\n* **y** - the y-coordinate of the center of the node\n\nThe edge's `dagre` object has a `points` property, which is an array of objects\nwith the following properties:\n\n* **x** - the x-coordinate for the center of this bend in the edge\n* **y** - the y-coordinate for the center of this bend in the edge\n\nFor example, the following layout information is generated for the above objects:\n\n```js\nlayout.eachNode(function(u, value) {\n    console.log(\"Node \" + u + \": \" + JSON.stringify(value));\n});\nlayout.eachEdge(function(e, u, v, value) {\n    console.log(\"Edge \" + u + \" -> \" + v + \": \" + JSON.stringify(value));\n});\n```\n\nPrints:\n\n```\nNode kspacey: {\"id\":\"kspacey\",\"width\":144,\"height\":100,\"rank\":0,\"order\":0,\"ul\":0,\"ur\":0,\"dl\":0,\"dr\":0,\"x\":84,\"y\":50}\nNode swilliams: {\"id\":\"swilliams\",\"width\":168,\"height\":100,\"rank\":2,\"order\":0,\"ul\":0,\"ur\":0,\"dl\":0,\"dr\":0,\"x\":84,\"y\":180}\nNode bpitt: {\"id\":\"bpitt\",\"width\":108,\"height\":100,\"rank\":2,\"order\":1,\"ul\":188,\"ur\":188,\"dl\":188,\"dr\":188,\"x\":272,\"y\":180}\nNode hford: {\"id\":\"hford\",\"width\":168,\"height\":100,\"rank\":0,\"order\":1,\"ul\":364,\"ur\":364,\"dl\":364,\"dr\":364,\"x\":448,\"y\":50}\nNode lwilson: {\"id\":\"lwilson\",\"width\":144,\"height\":100,\"rank\":2,\"order\":2,\"ul\":364,\"ur\":364,\"dl\":364,\"dr\":364,\"x\":448,\"y\":180}\nNode kbacon: {\"id\":\"kbacon\",\"width\":121,\"height\":100,\"rank\":4,\"order\":0,\"ul\":188,\"ur\":188,\"dl\":0,\"dr\":364,\"x\":272,\"y\":310}\n\nEdge kspacey -> swilliams: {\"points\":[{\"x\":84,\"y\":115,\"ul\":0,\"ur\":0,\"dl\":0,\"dr\":0}],\"id\":\"_E0\",\"minLen\":2,\"width\":0,\"height\":0}\nEdge swilliams -> kbacon: {\"points\":[{\"x\":84,\"y\":245,\"ul\":0,\"ur\":0,\"dl\":0,\"dr\":0}],\"id\":\"_E1\",\"minLen\":2,\"width\":0,\"height\":0}\nEdge bpitt -> kbacon: {\"points\":[{\"x\":272,\"y\":245,\"ul\":188,\"ur\":188,\"dl\":188,\"dr\":188}],\"id\":\"_E2\",\"minLen\":2,\"width\":0,\"height\":0}\nEdge hford -> lwilson: {\"points\":[{\"x\":448,\"y\":115,\"ul\":364,\"ur\":364,\"dl\":364,\"dr\":364}],\"id\":\"_E3\",\"minLen\":2,\"width\":0,\"height\":0}\nEdge lwilson -> kbacon: {\"points\":[{\"x\":448,\"y\":245,\"ul\":364,\"ur\":364,\"dl\":364,\"dr\":364}],\"id\":\"_E4\",\"minLen\":2,\"width\":0,\"height\":0}\n```\n\nBesides just the `x` and `y` coordinates there are other debug attributes that\nare not guaranteed to be present.\n\n### Configuring the Layout\n\nHere are a few methods you can call on the layout object to change layout behavior:\n\n* `debugLevel(x)` sets the level of logging verbosity to the number `x`. Currently 4 is th max.\n* `nodeSep(x)` sets the separation between adjacent nodes in the same rank to `x` pixels.\n* `edgeSep(x)` sets the separation between adjacent edges in the same rank to `x` pixels.\n* `rankSep(x)` sets the sepration between ranks in the layout to `x` pixels.\n* `rankDir(x)` sets the direction of the layout.\n    * Defaults to `\"TB\"` for top-to-bottom layout\n    * `\"LR\"` sets layout to left-to-right\n\nFor example, to set node separation to 20 pixels and the rank direction to left-to-right:\n\n```js\nvar layout = dagre.layout()\n                  .nodeSep(20)\n                  .rankDir(\"LR\")\n                  .run(g);\n```\n\n### Input Graph\n\nThe input graph supplied for layout can have the following attributes:\n\nObject | Attribute | Default | Description\n------ | --------- | ------- | -----------\ngraph  | rankDir   | TB      | Direction for rank nodes. Can be `TB`, `BT`, `LR`, or `RL`, where T = top, B = bottom, L = left, and R = right.\nnode   | height    |         | The height of the node.\nnode   | width     |         | The width of the node.\nedge   | minLen    | 1       | The number of ranks to keep between the source and target of the edge.\n\n\n### Output Graph\n\nThe output graph has the following attributes:\n\nObject | Attribute | Description\n------ | --------- | -----------\ngraph  | height    | The height of the entire graph.\ngraph  | width     | The width of the entire graph.\nnode   | x         | The x-coordinate for the center of the node.\nnode   | y         | The y-coordinate for the center of the node.\nedge   | points    | An array of { x, y } pairs for the control points of the edge.\n\n## Resources\n\n* [Issue tracker](https://github.com/cpettitt/dagre/issues)\n* [Mailing list](https://groups.google.com/group/dagre)\n\n### Recommend Reading\n\nThis work was produced by taking advantage of many papers and books. If you're\ninterested in how dagre works internally here are some of the most important\npapers to read.\n\nThe general skeleton for Dagre comes from *Gansner, et al., \"A Technique for\nDrawing Directed Graphs\"*, which gives both an excellent high level overview of\nthe phases involved in layered drawing as well as diving into the details and\nproblems of each of the phases. Besides the basic skeleton, we specifically\nused the technique described in the paper to produce an acyclic graph, and we\nuse the idea of a minimum spanning tree for ranking.  We do not currently use\nthe network simplex algorithm for ranking. If there is one paper to start with\nwhen learning about layered graph drawing, this seems to be it!\n\nFor crossing minimization we used *Jünger and Mutzel, \"2-Layer Straightline\nCrossing Minimization\"*, which provides a comparison of the performance of\nvarious heuristics and exact algorithms for crossing minimization.\n\nFor counting the number of edge crossings between two layers we use the `O(|E|\nlog |V_small|)` algorithm described in *Barth, et al., \"Simple and Efficient\nBilayer Cross Counting\"*.\n\nFor positioning (or coordinate assignment), we derived our algorithm from\n*Brandes and Köpf, \"Fast and Simple Horizontal Coordinate Assignment\"*. We made\nsome some adjustments to get tighter graphs when node and edges sizes vary\ngreatly.\n\n## Third Party Examples\n\nDagre has been included as a part of some very cool projects. Here are just a\ncouple that stand out:\n\n[JointJS][] has a plugin that uses dagre for layout. JointJS focuses on\nrendering and interaction with diagrams, which synergizes well with Dagre. If\nyou want the ability to move nodes and manipulate edges interactively, this is\na good place to start!\n\nJonathan Mace has a\n[demo](http://cs.brown.edu/people/jcmace/d3/graph.html?id=small.json) that\nmakes it possible to interactively explore graphs. In his demo, you can\nhighlight paths, collapse subgraphs, via detailed node information, and more!\n\n## License\n\ndagre is licensed under the terms of the MIT License. See the LICENSE file\nfor details.\n\n[npm package manager]: http://npmjs.org/\n[D3]: https://github.com/mbostock/d3\n[JointJS]: http://www.daviddurman.com/automatic-graph-layout-with-jointjs-and-dagre.html\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/cpettitt/dagre/issues"
  },
  "homepage": "https://github.com/cpettitt/dagre",
  "_id": "dagre@0.4.5",
  "_from": "dagre@"
}
