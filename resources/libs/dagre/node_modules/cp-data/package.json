{
  "name": "cp-data",
  "version": "1.1.3",
  "description": "cp-data is a JavaScript library for some common data structures",
  "main": "index.js",
  "keywords": [
    "set",
    "priority queue",
    "data structure"
  ],
  "devDependencies": {
    "benchmark": "~1.0.0",
    "browserify": "~2.33.1",
    "chai": "1.7.x",
    "jshint": "2.1.x",
    "istanbul": "~0.1.44",
    "mocha": "1.12.x",
    "semver": "2.1.x",
    "uglify-js": "1.2.3"
  },
  "author": {
    "name": "Chris Pettitt",
    "email": "chris@samsarin.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/cpettitt/cp-data.git"
  },
  "license": "MIT",
  "readme": "# cp-data\n\ncp-data is a JavaScript library for some common data structures. Currently this\nincludes a fast Set implementation and a PriorityQueue.\n\n[![Build Status](https://secure.travis-ci.org/cpettitt/cp-data.png)](http://travis-ci.org/cpettitt/cp-data)\n\n# Getting cp-data\n\n## NPM Install\n\nBefore installing this library you need to install the [npm package manager].\n\nTo get cp-data from npm, use:\n\n    $ npm install cp-data\n\n## Browser Scripts\n\nYou can get the latest browser-ready scripts:\n\n* [cp-data.js](http://cpettitt.github.io/project/cp-data/latest/cp-data.js)\n* [cp-data.min.js](http://cpettitt.github.io/project/cp-data/latest/cp-data.min.js)\n\n## Build From Source\n\nBefore building this library you need to install the [npm package manager].\n\nCheck out this project and run this command from the root of the project:\n\n    $ make\n\nThis will generate `cp-data.js` and `cp-data.min.js` in the `out/dist` directory\nof the project.\n\n# Set Example\n\n```js\nvar Set = require('cp-data').Set;\n\nvar s1 = new Set();\n\ns1.has(1);\n// => false\n\ns1.add(1);\n// => true\n\ns1.size();\n// => 1\n\ns1.has(1);\n// => true\n\n// Addind a key that is already in the set does not change the set. The\n// function returns `false` to indicate nothing changed.\ns1.add(1);\n// => false\n\ns1.size();\n// => 1\n\ns1.add(2);\ns1.size();\n// => 2\n\n// We can construct a set from an array\nvar s2 = new Set([2, 3, 4]);\n\ns2.keys();\n// => [2, 3, 4]\n\n// Intersection:\nSet.intersect([s1, s2]).keys();\n// => [2]\n\n// Union:\nSet.union([s1, s2]).keys();\n// => [1, 2, 3, 4]\n\n// We can also do set intersection / union with arrays:\nSet.intersect([[1, 2, 3], [2, 3, 4]]).keys();\n// => [2, 3]\n\n// We can do set intersection / union with more that 2 sets:\nSet.union([s1, s2, ['a', 'b', 'c']]).keys();\n// => [1, 2, 3, 4, 'a', 'b', 'c']\n\n// Lastly, sets preserve the type of the key supplied. Compare the following 2\n// results:\nnew Set([1]).keys();\n// => [1]\nnew Set(['1']).keys();\n// => ['1']\n```\n\n# License\n\ncp-data is licensed under the terms of the MIT License. See the LICENSE file\nfor details.\n\n[npm package manager]: http://npmjs.org/\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/cpettitt/cp-data/issues"
  },
  "homepage": "https://github.com/cpettitt/cp-data",
  "_id": "cp-data@1.1.3",
  "_from": "cp-data@1.1.3"
}
